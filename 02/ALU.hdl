// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    // zero x/y if zx/zy is set
    Mux16(a=x, b=false, sel=zx, out=maybex);
    Mux16(a=y, b=false, sel=zy, out=maybey);

    // negate (maybe zeroed) x
    Not16(in=maybex, out=negatedx);
    
    // negate (maybe zeroed) y
    Not16(in=maybey, out=negatedy);

    // use negated x/y if nx/ny is set
    Mux16(a=maybex, b=negatedx, sel=nx, out=actualx);
    Mux16(a=maybey, b=negatedy, sel=ny, out=actualy);

    // bitwise and x and y
    And16(a=actualx, b=actualy, out=xandy);
    
    // add x and y 
    Add16(a=actualx, b=actualy, out=addxy);

    // apply addition or bitwise and if f is true or false respectively
    Mux16(a=xandy, b=addxy, sel=f, out=mayberesult);

    // negate out
    Not16(in=mayberesult, out=negatedresult);

    // use negated result if no is set
    Mux16(a=mayberesult, b=negatedresult, sel=no, out=result);

    // compute zr
    And16(a[0..7]=true, b=result, out[0..7]=lowerresult);
    And16(a[8..15]=true, b=result, out[8..15]=upperresult);
    Or8Way(in=lowerresult, out=orlowerresult);
    Or8Way(in=upperresult, out=orupperresult);
    Or(a=orlowerresult, b=orupperresult, out=orresult);
    Not(in=orresult, out=zr);

    // compute ng
    And16(a=result, b[15]=true, out[15]=ng);

    // output the result
    And16(a=result, b=true, out=out);
}
