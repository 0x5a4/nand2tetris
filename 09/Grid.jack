class Grid {
    // 2 dimensional array holding all the tiles in the field
    // "1st level" is the y axis, "2nd level" is the x axis
    static Array tiles;
    static boolean grace;
    static int mineCount;
    static int flagCount;
    static int revealCount;

    function void init() {
        var int i;
        let tiles = Array.new(16);

        while (i < 16) {
            let tiles[i] = Array.new(16);
            let i = i + 1;
        }

        return;
    }

    function Array tiles() {
        return tiles;
    }
    
    function int mineCount() {
        return mineCount;
    }
    
    function int flagCount() {
        return flagCount;
    }

    function Tile get(int x, int y) {
        var Array xaxis; 

        let xaxis = tiles[y];

        return xaxis[x];
    }
    
    function void toggleFlag(int x, int y) {
        var Tile t; 
        let t = Grid.get(x, y);

        if (t.isRevealed()) {
            return;
        }

        if (t.toggleFlag()) {
            let flagCount = flagCount + 1; 
        } else {
            let flagCount = flagCount - 1; 
        }
        
        return;
    }

    // returns 0 if nothing happened
    // returns 1 if the game is won
    // returns 2 if the game is lost
    function int reveal(int x, int y) {
        var Tile t; 
        var int surroundingFlags;
        var int neighbors;

        if ((x < 0) | (y < 0) | (x > 15) | (y > 15)) {
            return 0;
        }

        let t = Grid.get(x, y);

        if (t.isFlagged() | t.isRevealed()) {
            return 0;
        }

        do t.reveal();

        let revealCount = revealCount + 1;

        if (t.isMine()) {
            if (grace) {
                do Grid.moveTileOutOfTheWay(t, x, y);
                do Graphics.drawMineCounter();
            } else {
                return 2; 
            }
        }
        
        let grace = false;

        if (256 - revealCount = mineCount) {
            return 1;
        }

        let neighbors = t.neighbors();
        
        if (neighbors = 0) {
            return Grid.revealSurrounding(x, y);
        }

        return 0;
    }

    function void moveTileOutOfTheWay(Tile t, int x, int y) {
        // doesnt actually move the tile out of the way lmao.
        var int xoff; 
        var int yoff;
        var Tile neighbor; 
        
        do t.dontBeAMine();
        let mineCount = mineCount - 1;
        
        let xoff = -1;
        let yoff = -1;

        while (yoff < 2) {
            while (xoff < 2) {
                if (~((yoff = 0) & (xoff = 0))) {
                    let neighbor = Grid.get(x + xoff, y + yoff);
                    do neighbor.decreaseNeighbors();
                }
                
                let xoff = xoff + 1;
            }

            let xoff = -1;
            let yoff = yoff + 1;
        }
        
        return;
    }

    function void revealAll() {
        var int x; 
        var int y; 
        var Array xaxis;
        var Tile t;

        while (y < 16) {
            let xaxis = tiles[y];

            while (x < 16) {
                let t = xaxis[x];

                do t.reveal();

                let x = x + 1;
            }

            let x = 0;
            let y = y + 1;
        }

        return;
    }

    function int revealWithSurrounding(int x, int y) {
        var int revealResult;      
        var int surroundingFlags;      
        var int neighbors;      
        var Tile t;

        let revealResult = Grid.reveal(x, y);

        if (~(revealResult = 0)) {
            return revealResult;
        }

        let t = Grid.get(x, y);
        let neighbors = t.neighbors();
        let surroundingFlags = Grid.countSurroundingFlags(x, y);

        if ((neighbors < surroundingFlags) | (neighbors = surroundingFlags)) {
            return Grid.revealSurrounding(x, y);
        }

        return 0;
    }

    function int revealSurrounding(int x, int y) {
        var int xoff; 
        var int yoff;
        var int revealResult;

        let xoff = -1;
        let yoff = -1;

        while (yoff < 2) {
            while (xoff < 2) {
                if (~((yoff = 0) & (xoff = 0))) {
                    let revealResult = Grid.reveal(x + xoff, y + yoff);

                    if (~(revealResult = 0)) {
                        return revealResult;
                    }
                }
                
                let xoff = xoff + 1;
            }

            let xoff = -1;
            let yoff = yoff + 1;
        }

        return 0;
    }

    function int countSurroundingFlags(int x, int y) {
        var int result;

        let result = result + Grid.isTileFlagged(x - 1, y - 1);
        let result = result + Grid.isTileFlagged(x, y - 1);
        let result = result + Grid.isTileFlagged(x + 1, y - 1);
        let result = result + Grid.isTileFlagged(x - 1, y);
        let result = result + Grid.isTileFlagged(x + 1, y);
        let result = result + Grid.isTileFlagged(x - 1, y + 1);
        let result = result + Grid.isTileFlagged(x, y + 1);
        let result = result + Grid.isTileFlagged(x + 1, y + 1);

        return result;
    }

    function int isTileFlagged(int x, int y) {
        var Tile t;
        
        if ((x < 0) | (y < 0) | (x > 15) | (y > 15)) {
            return 0;
        }

        let t = Grid.get(x, y);

        if (t.isFlagged()) {
            return 1;
        }

        return 0;
    }

    function void generate(int seed) {
        var Random random;
        var int x;  
        var int y;  
        var int newSeed;

        let grace = true;
        let mineCount = 0;
        let flagCount = 0;
        let revealCount = 0;

        // generate the first half of the board
        let random = Random.new(seed);
        let x = 0; 
        let y = 0; 

        while (y < 16) {
            while (x < 16) {
                do Grid.putTile(x, y, random);
                let x = x + 1;
            }

            if (y = 8) {
                // fresh rng, to prevent obvious looping of the board  
                let newSeed = random.next();
                let random = Random.new(newSeed);
            }

            let x = 0;
            let y = y + 1;
        }

        return;
    }

    function void putTile(int x, int y, Random random) {
        var boolean isMine;
        var int ran;
        var Array xaxis;
        var Tile tile;

        let ran = random.next();
        let ran = ran & 7;
        if (ran = 0) {
            let isMine = true;
            let mineCount = mineCount + 1;
        } else {
            let isMine = false;
        }
        let tile = Tile.new(isMine);
        let xaxis = tiles[y];

        // collect neighboring mines and notify neighbors if this is a mine
        do Grid.notifyNeighbor(tile, x - 1, y);
        do Grid.notifyNeighbor(tile, x - 1, y - 1);
        do Grid.notifyNeighbor(tile, x + 1, y - 1);
        do Grid.notifyNeighbor(tile, x, y - 1);

        let xaxis[x] = tile;
        
        return;
    }

    
    function void notifyNeighbor(Tile self, int neighborX, int neighborY) {
        var Tile neighbor;
        var Array xaxis;
        
        if ((neighborX < 0) | (neighborY < 0) | (neighborX > 15) | (neighborY > 15)) {
            return;
        }

        let xaxis = tiles[neighborY];
        let neighbor = xaxis[neighborX];

        if (self.isMine()) {
            do neighbor.increaseNeighbors();
        }

        if (neighbor.isMine()) {
            do self.increaseNeighbors();
        }
        
        return;
    }
}
